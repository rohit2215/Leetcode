class Solution {
public:
    int romanToInt(string s) {
     int map<char,int>mp={{'I',1},{'V',5},{'X',10},{'L',50},{'C',100},{'D',500},{'M',1000}};
      int n=s.size();
      int total= mp[s.back()];
      for(int i=n-2;i>=0;i--){
        if(mp[s[i] < mp[s[i+1]){
          total=total- mp[s[i]];
        }
        else{
          total=total+mp[s[i]];
        }
     }
      return total;
  }
}                        
                        
                        
Time complexity:- O(n)
space complexity= O(1) because the space used by the map and other variables (n, total, i) 
remains constant regardless of the size of the input string. 
The map has a fixed number of entries (7 entries for the Roman numerals),
 and the other variables are of primitive types and don't consume additional space as the input size increases.
